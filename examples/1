import os
import struct
import pickle
import random
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../python')))
from tensor import Tensor

class MLP:
    def __init__(self, input_size, hidden_size, output_size):
        self.w1 = Tensor.random((input_size, hidden_size))
        self.b1 = Tensor.zeros((hidden_size,))
        self.w2 = Tensor.random((hidden_size, output_size))
        self.b2 = Tensor.zeros((output_size,))

    def forward(self, x):
        self.x = x
        self.h = (x.matmul(self.w1) + self.b1).relu()
        self.out = self.h.matmul(self.w2) + self.b2
        return self.out

    def parameters(self):
        return [self.w1, self.b1, self.w2, self.b2]

    def save(self, path="model.pkl"):
        with open(path, "wb") as f:
            pickle.dump(self.parameters(), f)

    def load(self, path="model.pkl"):
        with open(path, "rb") as f:
            params = pickle.load(f)
            self.w1.data[:] = params[0].data
            self.b1.data[:] = params[1].data
            self.w2.data[:] = params[2].data
            self.b2.data[:] = params[3].data

    def __call__(self, x):
            return self.foward(x)
